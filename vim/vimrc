"=============================================================================="
"                               General Settings                               "
"~============================================================================="
set shellslash              " allow us to use / for windows paths instead of \

if has('win32') || has ('win64')
    let $VIMHOME = $HOME."/vimfiles"
else
    let $VIMHOME = $HOME."/.vim"
endif

let base16colorspace=256    " using corresponding shell theme
" set background=dark
colorscheme base16-monokai  " set color scheme
set nu                      " turn on line numbers
set tw=80                   " text width
set tabstop=4               " number of spaces a tab counts for
set shiftwidth=4            " number of spaces to shift
set softtabstop=4           " backspace can get rid of 4 spaces with one press
set expandtab               " turn tab into spaces
set nojs                    " do not join spaces (results in extra space)
syntax on                   " turn syntax highlighting on
set backspace=2             " turn on backspace in insert mode
set smartindent             " smart autoindenting
set hlsearch                " turn on search highlighting
set smartcase               " turn on smart case sensitivity for searches
set ignorecase              " needed for smartcase
set encoding=utf-8          " set default encoding to utf-8
set filetype=unix           " default filetype
set fileformats=unix,dos    " :help filetypes
set cursorline!             " highlight cursor line; disabled (slow)
set cc=81                   " highlight 81st column
set laststatus=2            " turn on status bar
set listchars=tab:‚ñ∏\ ,eol:¬¨ " use these to show white space
set backup                  " turn backups on
set linebreak               " don't softbreak in the middle of words
set display=lastline        " prevent showing symbol when line doesn't fit
set breakindent             " matching indent for soft wrapped lines
set omnifunc=syntaxcomplete#Complete " turn on omnicompletion
let &viminfo.=",n" . "$HOME/.vim/.viminfo" " viminfo directory
let &backupdir=$VIMHOME . "/backup/" " backup directory
let &directory=$VIMHOME . "/swap/" " swap file directory

filetype plugin on          " load plugins in ftplugin directories

" Disabled options
" set nohlsearch            " turn off search highlighting
" set autochdir

" When you must have soft wrapping, use this:
" set tw=0 " set text width to zero prevents automatic hard wrapping
" set linebreak " prevents breaks in the middle of words
set display=lastline " allow partial lines to be shown
" TODO: make a command to toggle between hard/soft break settings


"=============================================================================="
"                                   Mappings                                   "
"~============================================================================="
execute "set <M-a>=a"
execute "set <M-y>=y"
execute "set <M-p>=p"
" execute "set <M-j>=j"
" execute "set <M-k>=k"
" execute "set <M-4>=4"
" execute "set <M-6>=6"
" execute "set <M-0>=0"
nmap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
map <C-n> :NERDTreeToggle<CR>
" move in soft wrapped text using ctrl+direction instead of g then direction
vmap <M-j> gj
vmap <M-k> gk
vmap <M-4> g$
vmap <M-6> g^
vmap <M-0> g^
nmap <M-j> gj
nmap <M-k> gk
nmap <M-4> g$
nmap <M-6> g^
nmap <M-0> g^
nmap $ g$
nmap ^ g^
vmap $ g$
vmap ^ g^

" make headers
nmap <F1><F1> :call MakeTextHeader("=", "%", 1)<CR>
nmap <F1><F2> :call MakeTextHeader("=", "%", 0)<CR>
nmap <F1><F3> :call MakeTextHeader("-", "%", 1)<CR>
nmap <F1><F4> :call MakeTextHeader("-", "%", 0)<CR>
nmap <F1><F5> :call MakeBottomRule()<CR>

" change wrapping mode
nmap <F3>s :set linebreak display=lastline tw=0<CR>
nmap <F3>h :set nolinebreak display= tw=80<CR>


" common Tabularize commands
"
" line up elements in table, ie.
" x | y | z
" xxxx | yyyy | zzzz
" becomes
" x    | y    | z
" xxxx | yyyy | zzzz
vmap <F2>\| :Tabularize /\|<CR>
nmap <F2>\| :Tabularize /\|<CR>

" same for tables & delimited tables
vmap <F2>& :Tabularize /&<CR>
nmap <F2>& :Tabularize /&<CR>

" line up elements in description, ie.
" First Item: description 1
" Second Item: description 2
" Third Item: description 3: sub-description
" becomes
" First Item  : description 1
" Second Item : description 2
" Third Item  : description 3: sub-description
" The pattern ensures that only the first ":" is matched
vmap <F2>: :Tabularize /^[^\:]*\zs\:<CR>
nmap <F2>: :Tabularize /^[^\:]*\zs\:<CR>

" aligns contents of [ ], ie.
" [here] [are] [some] [words]
" [and] [there are] [more] [here]
" becomes
" text [here] [are]       [some] [words]
" text [and]  [there are] [more] [here]
" here, l1 means left align text before [ and put one space, center align the [
" and put 0 spaces after the [
nmap <F2>[ :Tabularize /[/l1c0<CR>
vmap <F2>[ :Tabularize /[/l1c0<CR>

" K=split line
map K i<CR><Esc>k

" change local working directory to current file directory
nnoremap <F6> :cd %:p:h<CR>:pwd<CR>

" copy current directory to clipboard
nnoremap <C-F6> :let @+=getcwd()<CR>

" clipboard copy/paste
" 7-bit terminal support (slows down exiting insert mode...)
" vmap y <M-y>
" nmap p <M-p>
" imap p <M-p>

" " osx support
" vmap ¬• <M-y>
" nmap œÄ <M-p>
" imap œÄ <M-p>

vmap <M-y> "+y
nmap <M-p> "+p
imap <M-p> <C-r>+
"
" " select all
nmap <M-a> ggVG
" nmap √• ggVG

" open vimrc
nmap <F12>r :tabe $HOME/dotfiles/vim/vimrc<CR>
nmap <F12>g :tabe $HOME/dotfiles/vim/gvimrc<CR>

:nnoremap <F5> "=strftime("%H:%M")<CR>P
:inoremap <F5> <C-R>=strftime("%H:%M")<CR>

"=============================================================================="
"                         Airline Status Bar Settings                          "
"~============================================================================="
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_theme = 'base16'
let g:Powerline_symbols="fancy"
let g:airline_left_sep = '‚ÆÄ'
let g:airline_left_alt_sep = '‚ÆÅ'
let g:airline_right_sep = '‚ÆÇ'
let g:airline_right_alt_sep = '‚ÆÉ'
let g:airline_symbols.branch = '‚≠†'
let g:airline_symbols.readonly = '‚≠§'
" let g:airline_symbols.linenr = '‚≠°'
let g:airline_symbols.linenr = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = '‚ÆÄ'
let g:airline#extensions#tabline#left_alt_sep = '‚ÆÅ'
let g:airline#extensions#whitespace#trailing_format = 'T[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'I[%s]'

function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
    let g:airline_section_b = airline#section#create_left(['ffenc', '%t'])
    let g:airline_section_c = airline#section#create(['filetype'])
    let g:airline_section_x = airline#section#create([''])
    let g:airline_section_y = airline#section#create(['%B'])
    let g:airline_section_z = airline#section#create_right(['%P', '%l', '%c'])
endfunction
autocmd VimEnter * call AirlineInit()

"==============================================================================%
"                               vimtex settings                                %
"~=============================================================================%
" let g:vimtex_quickfix_open_on_warning = 0
let g:vimtex_quickfix_latexlog = {
      \ 'default' : 1,
      \ 'ignore_filters' : [],
      \ 'general' : 1,
      \ 'references' : 1,
      \ 'overfull' : 0,
      \ 'underfull' : 0,
      \ 'font' : 1,
      \ 'packages' : {
      \   'default' : 1,
      \   'general' : 1,
      \   'babel' : 1,
      \   'biblatex' : 1,
      \   'fixltx2e' : 1,
      \   'hyperref' : 1,
      \   'natbib' : 1,
      \   'scrreprt' : 1,
      \   'titlesec' : 1,
      \ }}
